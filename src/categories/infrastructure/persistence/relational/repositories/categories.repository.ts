import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { CategoryEntity } from '../entities/category.entity';
import { NullableType } from '../../../../../utils/types/nullable.type';
import { Category } from '../../../../domain/category';
import { CategoryRepository } from '../../category.repository';
import { CategoryMapper } from '../mappers/category.mapper';
import { IPaginationOptions } from '../../../../../utils/types/pagination-options';
import {
  FilterCategoryDto,
  SortCategoryDto,
} from '../../../../dto/query-category.dto';

@Injectable()
export class CategoriesRelationalRepository implements CategoryRepository {
  constructor(
    @InjectRepository(CategoryEntity)
    private readonly categoriesRepository: Repository<CategoryEntity>,
  ) {}

  async create(
    data: Omit<Category, 'id' | 'createdAt' | 'updatedAt' | 'deletedAt'>,
  ): Promise<Category> {
    const persistenceModel = CategoryMapper.toPersistence({
      ...data,
      // These will be generated by the database
      id: 0,
      createdAt: new Date(),
      updatedAt: new Date(),
      deletedAt: null,
    });

    const newEntity = await this.categoriesRepository.save(
      this.categoriesRepository.create(persistenceModel),
    );

    return CategoryMapper.toDomain(newEntity);
  }

  async findManyWithPagination({
    filterOptions,
    sortOptions,
    paginationOptions,
  }: {
    filterOptions?: FilterCategoryDto | null;
    sortOptions?: SortCategoryDto[] | null;
    paginationOptions: IPaginationOptions;
  }): Promise<Category[]> {
    const where: Record<string, any> = {};

    if (filterOptions?.name) {
      where.name = filterOptions.name;
    }

    if (filterOptions?.slug) {
      where.slug = filterOptions.slug;
    }

    if (filterOptions?.isActive !== undefined) {
      where.isActive = filterOptions.isActive;
    }

    if (filterOptions?.parentId !== undefined) {
      where.parentId = filterOptions.parentId;
    }

    const entities = await this.categoriesRepository.find({
      skip: (paginationOptions.page - 1) * paginationOptions.limit,
      take: paginationOptions.limit,
      where: where,
      order: sortOptions?.reduce(
        (order, sort) => ({
          ...order,
          [sort.orderBy]: sort.order,
        }),
        {},
      ),
    });

    return entities.map((entity) => CategoryMapper.toDomain(entity));
  }

  async findById(id: Category['id']): Promise<NullableType<Category>> {
    const entity = await this.categoriesRepository.findOne({
      where: { id: Number(id) },
    });

    return entity ? CategoryMapper.toDomain(entity) : null;
  }

  async findBySlug(slug: Category['slug']): Promise<NullableType<Category>> {
    const entity = await this.categoriesRepository.findOne({
      where: { slug },
    });

    return entity ? CategoryMapper.toDomain(entity) : null;
  }

  async findByIds(ids: Category['id'][]): Promise<Category[]> {
    const entities = await this.categoriesRepository.findByIds(
      ids.map((id) => Number(id)),
    );

    return entities.map((entity) => CategoryMapper.toDomain(entity));
  }

  async update(
    id: Category['id'],
    payload: Partial<Category>,
  ): Promise<Category | null> {
    const entity = await this.categoriesRepository.findOne({
      where: { id: Number(id) },
    });

    if (!entity) {
      return null;
    }

    const updatedEntity = await this.categoriesRepository.save(
      this.categoriesRepository.create(
        CategoryMapper.toPersistence({
          ...CategoryMapper.toDomain(entity),
          ...payload,
        }),
      ),
    );

    return CategoryMapper.toDomain(updatedEntity);
  }

  async remove(id: Category['id']): Promise<void> {
    await this.categoriesRepository.softDelete(Number(id));
  }
}
