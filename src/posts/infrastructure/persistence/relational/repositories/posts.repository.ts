import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { PostEntity } from '../entities/post.entity';
import { NullableType } from '../../../../../utils/types/nullable.type';
import { Post } from '../../../../domain/post';
import { PostRepository } from '../../post.repository';
import { PostMapper } from '../mappers/post.mapper';
import { IPaginationOptions } from '../../../../../utils/types/pagination-options';
import { FilterPostDto, SortPostDto } from '../../../../dto/query-post.dto';

@Injectable()
export class PostsRelationalRepository implements PostRepository {
  constructor(
    @InjectRepository(PostEntity)
    private readonly postsRepository: Repository<PostEntity>,
  ) {}

  async create(
    data: Omit<Post, 'id' | 'createdAt' | 'updatedAt' | 'deletedAt'>,
  ): Promise<Post> {
    const persistenceModel = PostMapper.toPersistence({
      ...data,
      // These will be generated by the database
      id: 0,
      createdAt: new Date(),
      updatedAt: new Date(),
      deletedAt: null, // This should be null for active records
    });

    const newEntity = await this.postsRepository.save(
      this.postsRepository.create(persistenceModel),
    );

    return PostMapper.toDomain(newEntity);
  }

  async findManyWithPagination({
    filterOptions,
    sortOptions,
    paginationOptions,
  }: {
    filterOptions?: FilterPostDto | null;
    sortOptions?: SortPostDto[] | null;
    paginationOptions: IPaginationOptions;
  }): Promise<Post[]> {
    const where: Record<string, any> = {};

    if (filterOptions?.title) {
      where.title = filterOptions.title;
    }

    if (filterOptions?.slug) {
      where.slug = filterOptions.slug;
    }

    if (filterOptions?.status) {
      where.status = filterOptions.status;
    }

    if (filterOptions?.isActive !== undefined) {
      where.isActive = filterOptions.isActive;
    }

    if (filterOptions?.authorId) {
      where.author = { id: filterOptions.authorId };
    }

    if (filterOptions?.categoryId) {
      where.category = { id: filterOptions.categoryId };
    }

    const entities = await this.postsRepository.find({
      skip: (paginationOptions.page - 1) * paginationOptions.limit,
      take: paginationOptions.limit,
      where,
      order: sortOptions?.reduce(
        (accumulator, sort) => ({
          ...accumulator,
          [sort.orderBy]: sort.order,
        }),
        {},
      ),
      relations: ['author', 'category', 'tags'],
    });

    return entities.map((entity) => PostMapper.toDomain(entity));
  }

  async findById(id: Post['id']): Promise<NullableType<Post>> {
    const entity = await this.postsRepository.findOne({
      where: { id: Number(id) },
      relations: ['author', 'category', 'tags'],
    });

    return entity ? PostMapper.toDomain(entity) : null;
  }

  async findBySlug(slug: Post['slug']): Promise<NullableType<Post>> {
    const entity = await this.postsRepository.findOne({
      where: { slug },
      relations: ['author', 'category', 'tags'],
    });

    return entity ? PostMapper.toDomain(entity) : null;
  }

  async findByIds(ids: Post['id'][]): Promise<Post[]> {
    const entities = await this.postsRepository.find({
      where: { id: ids.map((id) => Number(id)) as any },
      relations: ['author', 'category', 'tags'],
    });

    return entities.map((entity) => PostMapper.toDomain(entity));
  }

  async update(
    id: Post['id'],
    payload: Partial<
      Omit<Post, 'id' | 'createdAt' | 'updatedAt' | 'deletedAt'>
    >,
  ): Promise<Post | null> {
    const entity = await this.postsRepository.findOne({
      where: { id: Number(id) },
    });

    if (!entity) {
      return null;
    }

    const updatedEntity = await this.postsRepository.save(
      this.postsRepository.create(
        PostMapper.toPersistence({
          ...PostMapper.toDomain(entity),
          ...payload,
        }),
      ),
    );

    return PostMapper.toDomain(updatedEntity);
  }

  async remove(id: Post['id']): Promise<void> {
    await this.postsRepository.softDelete(id);
  }
}
