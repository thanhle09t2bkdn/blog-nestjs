import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, In } from 'typeorm';
import { TagEntity } from '../entities/tag.entity';
import { NullableType } from '../../../../../utils/types/nullable.type';
import { Tag } from '../../../../domain/tag';
import { TagRepository } from '../../tag.repository';
import { TagMapper } from '../mappers/tag.mapper';
import { IPaginationOptions } from '../../../../../utils/types/pagination-options';
import { FilterTagDto, SortTagDto } from '../../../../dto/query-tag.dto';

@Injectable()
export class TagsRelationalRepository implements TagRepository {
  constructor(
    @InjectRepository(TagEntity)
    private readonly tagsRepository: Repository<TagEntity>,
  ) {}

  async create(
    data: Omit<Tag, 'id' | 'createdAt' | 'updatedAt' | 'deletedAt'>,
  ): Promise<Tag> {
    const persistenceModel = TagMapper.toPersistence({
      ...data,
      // These will be generated by the database
      id: 0,
      createdAt: new Date(),
      updatedAt: new Date(),
      deletedAt: new Date(), // This will be overridden by the entity
    });

    const newEntity = await this.tagsRepository.save(
      this.tagsRepository.create(persistenceModel),
    );

    return TagMapper.toDomain(newEntity);
  }

  async findManyWithPagination({
    filterOptions,
    sortOptions,
    paginationOptions,
  }: {
    filterOptions?: FilterTagDto | null;
    sortOptions?: SortTagDto[] | null;
    paginationOptions: IPaginationOptions;
  }): Promise<Tag[]> {
    const where: Record<string, any> = {};

    if (filterOptions?.name) {
      where.name = filterOptions.name;
    }

    if (filterOptions?.slug) {
      where.slug = filterOptions.slug;
    }

    if (filterOptions?.isActive !== undefined) {
      where.isActive = filterOptions.isActive;
    }

    const entities = await this.tagsRepository.find({
      skip: (paginationOptions.page - 1) * paginationOptions.limit,
      take: paginationOptions.limit,
      where,
      order: sortOptions?.reduce(
        (accumulator, sort) => ({
          ...accumulator,
          [sort.orderBy]: sort.order,
        }),
        {},
      ),
    });

    return entities.map((entity) => TagMapper.toDomain(entity));
  }

  async findById(id: Tag['id']): Promise<NullableType<Tag>> {
    const entity = await this.tagsRepository.findOne({
      where: { id: Number(id) },
    });

    return entity ? TagMapper.toDomain(entity) : null;
  }

  async findBySlug(slug: Tag['slug']): Promise<NullableType<Tag>> {
    const entity = await this.tagsRepository.findOne({
      where: { slug },
    });

    return entity ? TagMapper.toDomain(entity) : null;
  }

  async findByIds(ids: Tag['id'][]): Promise<Tag[]> {
    const entities = await this.tagsRepository.find({
      where: { id: In(ids.map((id) => Number(id))) },
    });

    return entities.map((entity) => TagMapper.toDomain(entity));
  }

  async findByNames(names: string[]): Promise<Tag[]> {
    const entities = await this.tagsRepository.find({
      where: { name: In(names) },
    });

    return entities.map((entity) => TagMapper.toDomain(entity));
  }

  async update(
    id: Tag['id'],
    payload: Partial<Omit<Tag, 'id' | 'createdAt' | 'updatedAt' | 'deletedAt'>>,
  ): Promise<Tag | null> {
    const entity = await this.tagsRepository.findOne({
      where: { id: Number(id) },
    });

    if (!entity) {
      return null;
    }

    const updatedEntity = await this.tagsRepository.save(
      this.tagsRepository.create(
        TagMapper.toPersistence({
          ...TagMapper.toDomain(entity),
          ...payload,
        }),
      ),
    );

    return TagMapper.toDomain(updatedEntity);
  }

  async remove(id: Tag['id']): Promise<void> {
    await this.tagsRepository.softDelete(id);
  }

  async incrementUsageCount(id: Tag['id']): Promise<Tag | null> {
    const entity = await this.tagsRepository.findOne({
      where: { id: Number(id) },
    });

    if (!entity) {
      return null;
    }

    entity.usageCount += 1;
    const updatedEntity = await this.tagsRepository.save(entity);

    return TagMapper.toDomain(updatedEntity);
  }

  async decrementUsageCount(id: Tag['id']): Promise<Tag | null> {
    const entity = await this.tagsRepository.findOne({
      where: { id: Number(id) },
    });

    if (!entity) {
      return null;
    }

    entity.usageCount = Math.max(0, entity.usageCount - 1);
    const updatedEntity = await this.tagsRepository.save(entity);

    return TagMapper.toDomain(updatedEntity);
  }
}
